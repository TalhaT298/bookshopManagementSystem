composer create-project laravel/laravel laravel-bookstore
composer install
php artisan key:generate
php artisan migrate
php artisan serve



object2
php artisan make:model Book -cfm
1. Models>book>
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Book extends Model
{
    use HasFactory;

    protected $fillable = [
        "title",
        "author",
        "isbn",
        "price", 
        "stock",
    ]; 
}

2.Http/Controller>BookController.php

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Book;

class BookController extends Controller
{
    public function index()
    {
        $books = Book::paginate(10);
        return view('books.index')->with('books', $books);
    }

    public function show($id) 
    {
        $book = Book::find($id);
        return view('books.show')->with('book', $book);
    }

    public function create()
    {
        return view('books.create');
    }

    public function store(Request $request)
    {
        $rules = [
            "title"=> "required",
            "author" => "required",
            "isbn" => "required|size:13",
            "stock" => "required|numeric|integer|gte:0",
            "price" => "required|numeric"
        ];

        $message = [
            'stock.gte' => 'The stock must be greater than or equal to 0',
        ];

        $request->validate($rules);

        // $book = new Book();
        // $book->title = $request->title;
        // $book->author = $request->author;
        // $book->isbn = $request->isbn;
        // $book->price = $request->price;
        // $book->stock = $request->stock;
        // $book->save();

        $book = Book::create($request->all());

        return redirect()->route("books.show", $book->id);
    }

    public function destroy(Request $request, $id)  
    {
        $book = Book::find($id);
        $book->delete();

        return redirect()->route("books.index");
    }

    public function search(Request $request)
    {
        $text = '%' . $request->search . '%';
        $books = Book::where('title', 'LIKE', $text)->paginate(10);; 
        return view('books.index')->with('books', $books);
    }
}

3.database>factories>BookFactory.php

<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Book>
 */
class BookFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'title' => fake()->sentence,
            'author' => fake()->name,
            'isbn' => fake()->isbn13(),
            'stock' => fake()->numberBetween(1, 10),
            'price' => fake()->randomFloat(2, 10, 100),
        ];
    }
}

4.migration
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('books', function (Blueprint $table) {
            $table->id();
            $table->string('title', 255);
            $table->string('author', 255);
            $table->string('isbn', 13);
            $table->smallInteger('stock')->default(0);
            $table->float('price', 8)->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('books');
    }
};

5.seeder>databaseseeder.php

<?php

namespace Database\Seeders;

use App\Models\Book;
use App\Models\User;
// use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        // User::factory(10)->create();

        User::factory()->create([
            'name' => 'Test User',
            'email' => 'test@example.com',
        ]);

        Book::factory()->count(200)->create();
    }
}

php artisan db:seed DatabaseSeeder   

php artisan migrate  

